name: Publish to GitHub Packages

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Extract Version
        id: extract_version
        run: |
          VERSION=$(grep -oP 'version := "\K[^\"]+' scalafix/build.sbt)
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

#      - name: Update README.md with Latest Version
#        run: |
#          # Match the line containing "scalafixDependencies" and replace the version part with the latest version
#          sed -i "s|\(ThisBuild / scalafixDependencies += \"com.datenwissenschaften\" %% \"scalafix-rules\" % \)\"[^\"]*\"|\1\"$PACKAGE_VERSION\"|" README.md
#        env:
#          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}

#      - name: Commit and Push README.md Update
#        if: steps.check_package_version.outcome != 'failure'
#        run: |
#          git config --local user.name "github-actions[bot]"
#          git config --local user.email "github-actions[bot]@users.noreply.github.com"
#          git add README.md
#          git commit -m "Update README.md with latest version $PACKAGE_VERSION"
#          git push

      - name: Check if package and version already exist on GitHub Packages
        id: check_package_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}
        run: |
          PACKAGE_NAME="scalafmt-rules"
          OWNER="datenwissenschaften"
          REPO="scalafmt-rules"
          
          # Check if package exists
          PACKAGE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/orgs/$OWNER/packages/maven/com.datenwissenschaften/$PACKAGE_NAME")
          
          if [ "$PACKAGE_EXISTS" == "404" ]; then
            echo "Package $PACKAGE_NAME does not exist. This is the first version. Proceeding with publish."
          else
            # Check if specific version exists
            RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
             "https://api.github.com/orgs/$OWNER/packages/maven/com.datenwissenschaften/$PACKAGE_NAME/versions")
          
            VERSION_FOUND=$(echo "$RESPONSE" | jq -r ".[] | select(.name==\"$PACKAGE_VERSION\") | .name")
          
            if [ "$VERSION_FOUND" == "$PACKAGE_VERSION" ]; then
             echo "Version $PACKAGE_VERSION already exists. Exiting."
             exit 1
            else
             echo "Version $PACKAGE_VERSION is not published yet. Continuing..."
            fi
          fi

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: sbt

      - name: Cache SBT dependencies
        uses: actions/cache@v3
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-ivy2-${{ hashFiles('**/build.sbt') }}
          restore-keys: |
            ${{ runner.os }}-ivy2-

      - name: Cache SBT artifacts
        uses: actions/cache@v3
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
          restore-keys: |
            ${{ runner.os }}-sbt-

      - name: Publish to GitHub Packages
        if: steps.check_package_version.outcome != 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd scalafix
          sbt clean publish
